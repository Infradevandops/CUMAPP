name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Basic Python Tests
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov black isort flake8
        
    - name: Code formatting check (Black)
      run: black --check --diff . || echo "Black formatting issues found"
      continue-on-error: true
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff . || echo "Import sorting issues found"
      continue-on-error: true
      
    - name: Linting (flake8)
      run: flake8 . --count --max-line-length=88 --extend-ignore=E203,W503 || echo "Linting issues found"
      continue-on-error: true
      
    - name: Test Python imports
      env:
        JWT_SECRET_KEY: test_jwt_secret_key_for_ci_testing
        JWT_ALGORITHM: HS256
        JWT_EXPIRE_MINUTES: 30
        USE_MOCK_TWILIO: true
        DEBUG: false
      run: |
        python -c "
        import os
        os.environ.update({
            'JWT_SECRET_KEY': 'test_jwt_secret_key_for_ci_testing',
            'JWT_ALGORITHM': 'HS256',
            'JWT_EXPIRE_MINUTES': '30',
            'USE_MOCK_TWILIO': 'true',
            'DEBUG': 'false'
        })
        try:
            from main import app
            print('✅ Main app imports successfully')
        except Exception as e:
            print(f'❌ Import error: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        "

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      continue-on-error: true
      
    - name: List build directory
      working-directory: ./frontend
      run: ls -la build
      
    - name: Test frontend (if tests exist)
      working-directory: ./frontend
      run: |
        if [ -f "src/App.test.js" ]; then
          CI=true npm test -- --coverage --watchAll=false --passWithNoTests
        else
          echo "No frontend tests found, skipping..."
        fi
      continue-on-error: true

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: cumapp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Health Check
  health-check:
    name: Application Health Check
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create minimal test environment
      run: |
        cat > .env.test << EOF
        TEXTVERIFIED_API_KEY=test_key
        TEXTVERIFIED_EMAIL=test@example.com
        TWILIO_ACCOUNT_SID=test_sid
        TWILIO_AUTH_TOKEN=test_token
        TWILIO_PHONE_NUMBER=+1234567890
        GROQ_API_KEY=test_groq_key
        GROQ_MODEL=llama3-8b-8192
        JWT_SECRET_KEY=test_jwt_secret
        EOF
        
    - name: Run deployment readiness check
      env:
        PYTHONPATH: .
        JWT_SECRET_KEY: test_jwt_secret_key_for_testing_purposes_only
        JWT_ALGORITHM: HS256
        JWT_EXPIRE_MINUTES: 30
        USE_MOCK_TWILIO: true
        DEBUG: false
      run: |
        python scripts/deployment_check.py
        
    - name: Run deployment validation
      env:
        JWT_SECRET_KEY: test_jwt_secret_key_for_ci_testing
        JWT_ALGORITHM: HS256
        JWT_EXPIRE_MINUTES: 30
        USE_MOCK_TWILIO: true
        DEBUG: false
      run: |
        pip install httpx  # For TestClient
        python scripts/validate_deployment.py || echo "Validation completed with warnings"
      continue-on-error: true

  # Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests, docker-build, health-check]
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "## CI Pipeline Results"
        echo "Python Tests: ${{ needs.python-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Health Check: ${{ needs.health-check.result }}"
        
        if [[ "${{ needs.python-tests.result }}" == "success" && 
              "${{ needs.frontend-tests.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" && 
              "${{ needs.health-check.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
        else
          echo "⚠️  Some CI checks had issues. Review the logs above."
        fi