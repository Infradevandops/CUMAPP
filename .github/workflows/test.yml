name: Run Tests and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-playwright playwright
        playwright install --with-deps

    - name: Create test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
      run: |
        python scripts/setup_database.py
        alembic upgrade head

    - name: Run Python tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
      run: |
        pytest tests/ --cov=services --cov=api --cov=core --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html:coverage_report
        # Ensure minimum coverage
        coverage report --fail-under=80

    - name: Run E2E tests (headless)
      run: |
        pytest tests/test_e2e_flows.py --headed=false

    - name: Run frontend tests
      run: |
        cd static/js
        npm install  # If package.json exists; otherwise skip or use Python-based JS testing
        npm test -- --coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: Build and test Docker (optional)
      run: |
        docker build -t cumapp-test .
        docker run --rm -e DATABASE_URL=postgresql://postgres:postgres@localhost:5432/testdb cumapp-test pytest tests/

    - name: Security scan (basic)
      uses: github/codeql-action/analyze@v3
      with:
        languages: python
        queries: security-extended

    - name: Notify on failure (optional)
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Tests failed for CumApp! Check the logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # Set in repo secrets