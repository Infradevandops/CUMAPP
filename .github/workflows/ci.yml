name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit safety
        
    - name: Code formatting check (Black)
      run: black --check --diff .
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
      
    - name: Linting (flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Type checking (mypy)
      run: mypy . --ignore-missing-imports
      continue-on-error: true
      
    - name: Security check (bandit)
      run: bandit -r . -x tests/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Dependency security check (safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
        
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        TEXTVERIFIED_API_KEY=test_key
        TEXTVERIFIED_EMAIL=test@example.com
        TWILIO_ACCOUNT_SID=test_sid
        TWILIO_AUTH_TOKEN=test_token
        TWILIO_PHONE_NUMBER=+1234567890
        GROQ_API_KEY=test_groq_key
        GROQ_MODEL=llama3-8b-8192
        DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL=redis://localhost:6379
        JWT_SECRET_KEY=test_jwt_secret
        EOF
        
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-fail-under=70
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  # Docker Build and Security Scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: smsproj:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'smsproj:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests with Docker Compose
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create test environment
      run: |
        cp .env.example .env
        sed -i 's/your_textverified_api_key_here/test_key/g' .env
        sed -i 's/your_email@example.com/test@example.com/g' .env
        sed -i 's/your_twilio_account_sid_here/test_sid/g' .env
        sed -i 's/your_twilio_auth_token_here/test_token/g' .env
        sed -i 's/your_twilio_phone_number_here/+1234567890/g' .env
        sed -i 's/your_groq_api_key_here/test_groq_key/g' .env
        
    - name: Start services
      run: |
        docker-compose up -d --build
        sleep 30
        
    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
    - name: Run integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Test API info endpoint
        curl -f http://localhost:8000/api/info
        
        # Test OpenAPI docs
        curl -f http://localhost:8000/docs
        
    - name: Check service logs
      if: failure()
      run: |
        docker-compose logs app
        docker-compose logs db
        docker-compose logs redis
        
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Build and Push Docker Images (on main branch and releases)
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality, test, docker, integration]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: infradevandops/smsproj
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Update deployment (if configured)
      if: github.ref == 'refs/heads/main'
      run: |
        # Add deployment commands here
        # e.g., trigger deployment to staging/production
        echo "Deployment triggered for main branch"

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [quality, test, docker, integration]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success' && needs.integration.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify failure
      if: ${{ needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.docker.result == 'failure' || needs.integration.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1