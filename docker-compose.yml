version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: smsproj-app
    ports:
      - "8000:8000"
    environment:
      # Application settings
      - APP_NAME=SMSPROJ
      - PORT=8000
      - DEBUG=False
      
      # API credentials (loaded from .env file)
      - TEXTVERIFIED_API_KEY=${TEXTVERIFIED_API_KEY}
      - TEXTVERIFIED_EMAIL=${TEXTVERIFIED_EMAIL}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=${GROQ_MODEL:-llama3-8b-8192}
      
      # Database and Redis URLs
      - DATABASE_URL=postgresql://postgres:password@db:5432/smsproj_db
      - REDIS_URL=redis://redis:6379
      
      # Security settings
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./templates:/app/templates
    restart: unless-stopped
    networks:
      - smsproj-network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: smsproj-db
    environment:
      - POSTGRES_DB=smsproj_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - smsproj-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d smsproj_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: smsproj-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - smsproj-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: smsproj-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - smsproj-network
    profiles:
      - production

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network
networks:
  smsproj-network:
    driver: bridge