version: 2.1

# Define reusable commands
commands:
  setup-python:
    description: "Set up Python environment"
    parameters:
      python-version:
        type: string
        default: "3.11"
    steps:
      - run:
          name: Install Python << parameters.python-version >>
          command: |
            pyenv install << parameters.python-version >> || true
            pyenv global << parameters.python-version >>
            python --version
      - restore_cache:
          keys:
            - pip-cache-v1-{{ checksum "requirements.txt" }}
            - pip-cache-v1-
      - run:
          name: Install Python dependencies
          command: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-cov black isort flake8
      - save_cache:
          key: pip-cache-v1-{{ checksum "requirements.txt" }}
          paths:
            - ~/.cache/pip

  setup-node:
    description: "Set up Node.js environment"
    parameters:
      node-version:
        type: string
        default: "18"
    steps:
      - run:
          name: Install Node.js << parameters.node-version >>
          command: |
            curl -fsSL https://deb.nodesource.com/setup_<< parameters.node-version >>.x | sudo -E bash -
            sudo apt-get install -y nodejs
            node --version
            npm --version
      - restore_cache:
          keys:
            - npm-cache-v1-{{ checksum "frontend/package-lock.json" }}
            - npm-cache-v1-
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm ci
      - save_cache:
          key: npm-cache-v1-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules

# Define executors
executors:
  python-executor:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/project

  node-executor:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project

  docker-executor:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project

# Define jobs
jobs:
  # Code quality checks
  code-quality:
    executor: python-executor
    steps:
      - checkout
      - setup-python
      - run:
          name: Code formatting check (Black)
          command: black --check --diff . || echo "Black formatting issues found"
      - run:
          name: Import sorting check (isort)
          command: isort --check-only --diff . || echo "Import sorting issues found"
      - run:
          name: Linting (flake8)
          command: flake8 . --count --max-line-length=88 --extend-ignore=E203,W503 || echo "Linting issues found"

  # Python tests
  python-tests:
    executor: python-executor
    steps:
      - checkout
      - setup-python
      - run:
          name: Create test environment
          command: |
            export JWT_SECRET_KEY=test_jwt_secret_key_for_ci_testing
            export USE_MOCK_TWILIO=true
            export DEBUG=false
      - run:
          name: Test Python imports
          command: |
            export JWT_SECRET_KEY=test_jwt_secret_key_for_ci_testing
            export USE_MOCK_TWILIO=true
            export DEBUG=false
            python -c "
            try:
                from main import app
                print('✅ Main app imports successfully')
            except Exception as e:
                print(f'❌ Import error: {e}')
                import traceback
                traceback.print_exc()
                exit(1)
            "
      - run:
          name: Run Python tests
          command: |
            pytest tests/ -v --tb=short || echo "Some tests failed"
          no_output_timeout: 10m

  # Frontend tests
  frontend-tests:
    executor: node-executor
    steps:
      - checkout
      - setup-node
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm test -- --coverage --watchAll=false || echo "No frontend tests configured"
      - store_artifacts:
          path: frontend/build
          destination: frontend-build

  # Docker build test
  docker-build:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            docker build -t cumapp:test .
      - run:
          name: Test Docker image
          command: |
            docker run --rm cumapp:test python -c "print('Docker image works!')"

  # Security scan
  security-scan:
    executor: python-executor
    steps:
      - checkout
      - setup-python
      - run:
          name: Install security tools
          command: |
            pip install bandit safety
      - run:
          name: Run bandit security scan
          command: |
            bandit -r . -x tests/ -f json -o bandit-report.json || echo "Security issues found"
      - run:
          name: Run safety dependency check
          command: |
            safety check --json --output safety-report.json || echo "Dependency vulnerabilities found"
      - store_artifacts:
          path: bandit-report.json
          destination: security-reports/bandit-report.json
      - store_artifacts:
          path: safety-report.json
          destination: security-reports/safety-report.json

  # Health check
  health-check:
    executor: python-executor
    steps:
      - checkout
      - setup-python
      - run:
          name: Application health check
          command: |
            timeout 30 python -c "
            import os
            os.environ.update({
                'TEXTVERIFIED_API_KEY': 'test_key',
                'TEXTVERIFIED_EMAIL': 'test@example.com',
                'TWILIO_ACCOUNT_SID': 'test_sid',
                'TWILIO_AUTH_TOKEN': 'test_token',
                'TWILIO_PHONE_NUMBER': '+1234567890',
                'GROQ_API_KEY': 'test_groq_key',
                'GROQ_MODEL': 'llama3-8b-8192',
                'JWT_SECRET_KEY': 'test_jwt_secret'
            })

            try:
                from main import app
                print('✅ Application imports and initializes successfully')
            except Exception as e:
                print(f'❌ Application startup error: {e}')
                import traceback
                traceback.print_exc()
                exit(1)
            " || echo "Application startup test failed"

# Define workflows
workflows:
  version: 2

  # Main CI workflow
  ci-pipeline:
    jobs:
      - code-quality
      - python-tests:
          requires:
            - code-quality
      - frontend-tests:
          requires:
            - code-quality
      - security-scan:
          requires:
            - code-quality
      - docker-build:
          requires:
            - python-tests
            - frontend-tests
      - health-check:
          requires:
            - python-tests
            - frontend-tests

  # Nightly security scan
  nightly-security:
    triggers:
      - schedule:
          cron: "0 2 * * *" # Run at 2 AM daily
          filters:
            branches:
              only:
                - main
    jobs:
      - security-scan
